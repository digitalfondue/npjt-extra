/**
 * Copyright Â© 2015 digitalfondue (info@digitalfondue.ch)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.digitalfondue.npjt.query;

import ch.digitalfondue.npjt.*;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {TestJdbcConfiguration.class, QueryScannerConfiguration.class})
public class AutogeneratedKeyQueriesTest {

	@Autowired
	AutogeneratedKeyQueries aq;

	@Test
	public void autogeneratedKeyQueries() {

		aq.createTable();

		AffectedRowCountAndKey<Integer> res = aq.insert("test");
		AffectedRowCountAndKey<Integer> res2 = aq.insert("test2");
		AffectedRowCountAndKey<Integer> res3 = aq.insert("test3");

		Assert.assertEquals(aq.findKeyByValue("test"), res.getKey());
		Assert.assertEquals(1, res.getAffectedRowCount());
		
		Assert.assertEquals(aq.findKeyByValue("test2"), res2.getKey());
		Assert.assertEquals(1, res2.getAffectedRowCount());
		
		Assert.assertEquals(aq.findKeyByValue("test3"), res3.getKey());
		Assert.assertEquals(1, res3.getAffectedRowCount());
	}

	@QueryRepository
	public interface AutogeneratedKeyQueries {
		@Query("CREATE TABLE LA_AUTO (ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, VALUE CLOB NOT NULL)")
		void createTable();

		@Query("INSERT INTO LA_AUTO(VALUE) VALUES (:value)")
		AffectedRowCountAndKey<Integer> insert(@Bind("value") String value);

		@Query("SELECT ID FROM LA_AUTO WHERE VALUE = :value")
		Integer findKeyByValue(@Bind("value") String value);

	}

}
